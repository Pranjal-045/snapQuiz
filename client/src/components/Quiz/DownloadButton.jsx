import { useState } from 'react';
import html2pdf from 'html2pdf.js';

const DownloadButton = ({ mcqs, userAnswers, score, title }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  
  const handleDownload = async () => {
    setIsGenerating(true);
    
    try {
      // Create a container for the PDF content
      const element = document.createElement('div');
      element.style.padding = '20px';
      element.style.fontFamily = 'Arial, sans-serif';
      
      // Add quiz title and score
      const header = document.createElement('div');
      header.innerHTML = `
        <h1 style="color: #2563eb; font-size: 24px; margin-bottom: 8px;">${title || 'Quiz Results'}</h1>
        <div style="display: flex; margin-bottom: 20px;">
          <div style="background: #dbeafe; border-radius: 8px; padding: 10px; margin-right: 10px;">
            <p style="margin: 0; font-size: 14px;">Score</p>
            <p style="margin: 0; font-size: 18px; font-weight: bold;">${score.percentage}%</p>
          </div>
          <div style="background: #dbeafe; border-radius: 8px; padding: 10px; margin-right: 10px;">
            <p style="margin: 0; font-size: 14px;">Correct</p>
            <p style="margin: 0; font-size: 18px; font-weight: bold;">${score.correct}/${score.total}</p>
          </div>
          <div style="background: #dbeafe; border-radius: 8px; padding: 10px;">
            <p style="margin: 0; font-size: 14px;">Date</p>
            <p style="margin: 0; font-size: 18px; font-weight: bold;">${new Date().toLocaleDateString()}</p>
          </div>
        </div>
        <hr style="border: 1px solid #e5e7eb; margin: 20px 0;" />
      `;
      element.appendChild(header);
      
      // Add each question and answer
      mcqs.forEach((mcq, index) => {
        const userAnswer = userAnswers[index] || 'Not answered';
        const isCorrect = userAnswer === mcq.answer;
        
        const questionDiv = document.createElement('div');
        questionDiv.style.marginBottom = '20px';
        questionDiv.style.padding = '15px';
        questionDiv.style.borderRadius = '8px';
        questionDiv.style.background = '#f3f4f6';
        
        questionDiv.innerHTML = `
          <p style="font-weight: bold; margin-bottom: 10px;">Question ${index + 1}: ${mcq.question}</p>
          <div style="margin-bottom: 10px;">
            ${Object.entries(mcq.options).map(([key, value]) => `
              <div style="margin-bottom: 5px; padding: 8px; border-radius: 4px; background: ${
                key === mcq.answer ? '#d1fae5' : 
                (key === userAnswer && !isCorrect ? '#fee2e2' : '#ffffff')
              };">
                <span style="font-weight: bold; margin-right: 8px;">${key}.</span> ${value}
                ${key === mcq.answer ? 
                  '<span style="float: right; color: #10b981;">✓ Correct</span>' : 
                  (key === userAnswer && !isCorrect ? 
                    '<span style="float: right; color: #ef4444;">✗ Your answer</span>' : ''
                  )
                }
              </div>
            `).join('')}
          </div>
          ${!userAnswers[index] ? 
            '<p style="color: #6b7280; font-style: italic;">Not answered</p>' : 
            `<p style="color: ${isCorrect ? '#10b981' : '#ef4444'};">
              ${isCorrect ? '✓ Correct' : `✗ Wrong (Correct answer: ${mcq.answer})`}
            </p>`
          }
        `;
        
        element.appendChild(questionDiv);
      });
      
      // Add footer
      const footer = document.createElement('div');
      footer.style.marginTop = '30px';
      footer.style.textAlign = 'center';
      footer.style.color = '#6b7280';
      footer.style.fontSize = '12px';
      footer.innerHTML = `Generated by Auto MCQ Generator • ${new Date().toLocaleString()}`;
      element.appendChild(footer);
      
      // Generate PDF
      const opt = {
        margin: 10,
        filename: `${title || 'quiz'}_results.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
      };
      
      await html2pdf().set(opt).from(element).save();
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <button
      onClick={handleDownload}
      disabled={isGenerating}
      className={`py-2 px-4 rounded-lg font-medium transition flex items-center justify-center ${
        isGenerating
          ? 'bg-gray-400 cursor-not-allowed text-white'
          : 'bg-blue-600 hover:bg-blue-700 text-white'
      }`}
    >
      {isGenerating ? (
        <>
          <svg className="animate-spin -ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Generating...
        </>
      ) : (
        <>
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Download Results
        </>
      )}
    </button>
  );
};

export default DownloadButton;